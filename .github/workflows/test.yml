name: Build and Deploy Angular App via SFTP on O2Switch

on:
  push:
    branches:
      - test-cicd

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # # 2. Setup Node.js
      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 22

      # 5. Get runner's public IP
      - name: Get runner's public IP
        id: get_ip
        run: |
          IP=$(curl -s https://api.ipify.org)
          echo "ip=$IP" >> "$GITHUB_OUTPUT"

      - name: Whitelist runner IP on o2Switch and clean old GitHub IPs
        shell: bash
        env:
          LOGIN: ${{ secrets.O2SWITCH_LOGIN }}
          PASSWORD: ${{ secrets.O2SWITCH_PASSWORD }}
          SERVER: ${{ secrets.O2SWITCH_SERVER }}
          IP: ${{ steps.get_ip.outputs.ip }}
        run: |
          ENDPOINT='frontend/o2switch/o2switch-ssh-whitelist/index.live.php'
      
          # Encodage URL du mot de passe
          ENCODED_PASSWORD=$(echo -n "$PASSWORD" | jq -sRr @uri)
          echo "Mot de passe encodé : $ENCODED_PASSWORD"
      
          echo "Récupération des IPs actuellement en whitelist..."
          RESPONSE=$(curl -sX GET "https://$LOGIN:$ENCODED_PASSWORD@$SERVER:2083/$ENDPOINT?r=list")
          echo "Réponse brute : $RESPONSE"
      
          # Vérification JSON valide
          if ! echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
            echo "Erreur : la réponse n'est pas du JSON valide."
            exit 61
          fi
      
          HAS_LIST=$(echo "$RESPONSE" | jq -e '.data.list' >/dev/null 2>&1 && echo "yes" || echo "no")
          if [ "$HAS_LIST" = "no" ]; then
            echo "Erreur : la clé .data.list n'existe pas dans la réponse."
            exit 62
          fi
      
          UNIQUE_IPS=$(echo "$RESPONSE" | jq -r '.data.list[] | .address' | sort -u)
          echo "IPs à supprimer : $UNIQUE_IPS"
      
          for address in $UNIQUE_IPS; do
            echo "Suppression de l'IP $address (in)..."
            curl -sX GET "https://$LOGIN:$ENCODED_PASSWORD@$SERVER:2083/$ENDPOINT?r=remove&address=$address&direction=in&port=22" | jq
            sleep 2
            echo "Suppression de l'IP $address (out)..."
            curl -sX GET "https://$LOGIN:$ENCODED_PASSWORD@$SERVER:2083/$ENDPOINT?r=remove&address=$address&direction=out&port=22" | jq
            sleep 2
          done
      
          echo "Ajout de l'IP du runner $IP à la whitelist..."
          curl -sX POST -d "whitelist[address]=$IP" -d "whitelist[port]=22" "https://$LOGIN:$ENCODED_PASSWORD@$SERVER:2083/$ENDPOINT?r=add" | jq
